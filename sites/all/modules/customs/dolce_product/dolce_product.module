<?php

/*
function dolce_product_node_view($node) {
	$view = views_get_view('suggested_product');
	$args = array(16, 10);
	$view->set_arguments($args);
	$view->set_display('block');
	$view->execute();
	if (empty($view->result)) {
		$args = array(16);
		$view->set_arguments($args);
		$view->execute();
	}
	return $view->render();
}
*/

function _dolce_product_get_minimal_related($nid, $color_tid) {
	$view = views_get_view('suggested_product');
	$args = array($nid, $color_tid);
	$view->set_arguments($args);
	$view->set_display('block');
	$view->execute();
	if (empty($view->result)) {
	    unset($view);
        $view = views_get_view('suggested_product');
		$args = array($nid);
		$view->set_arguments($args);
		$view->execute();
	}
	return $view->render();
}

function dolce_product_commerce_cart_attributes_refresh_alter(&$commands, $form, $form_state) {
  // Display an alert message showing the new default product ID.
  //$commands[] = ajax_command_alert(t('Now defaulted to product @product_id.', array('@product_id' => $form['product_id']['#value'])));
  $product_id = $form['product_id']['#value'];
  $product = commerce_product_load($product_id);
  $color_tid = dolce_product_get_haqihana_color($product);
  $nid = $product->display_context['entity_id'];
  //$view_output = views_embed_view('suggested_product','block', $nid, $color_tid);
  $view_output = _dolce_product_get_minimal_related($nid, $color_tid);
  $commands[] = ajax_command_replace('#suggested_product', '<div id="suggested_product">' . $view_output . '</div>');
}

function dolce_product_get_haqihana_color($product) {
	if (!empty($product->field_hh_color)) {
		return $product->field_hh_color['und']['0']['tid'];
	}
	return NULL;
}

/**
 * Implements hook_views_pre_view().
 */
function dolce_product_views_pre_view(&$view, &$display_id, &$args)
{
    switch($view->name) {

        case 'suggested_product':
            $get = drupal_get_query_parameters();
            if (!empty($get['id'])) {
                $product_id = $get['id'];
                $product = commerce_product_load($product_id);
                $color_tid = dolce_product_get_haqihana_color($product);
                $nid = $product->display_context['entity_id'];
                $args = array($nid, $color_tid);
            }
    }
}

function dolce_product_entity_view($entity, $type, $view_mode, $langcode) {
    switch ($type) {
        case 'commerce_product':
            global $language;
            $langcode = $language->language;
            $entity->content['title_field']['0']['#markup'] = $entity->title_field[$langcode][0]['value'];
    }
}

/**
 * Implements hook_commerce_shipping_service_info_alter().
 */
function dolce_product_commerce_shipping_service_info_alter(&$shipping_services)
{
    if (isset($shipping_services['free_shipping'])) {
        $title = $shipping_services['free_shipping']['display_title'];
        $shipping_services['free_shipping']['display_title'] = t($title);
    }
}

function dolce_product_commerce_order_view($order, $view_mode) {
    // Add content variables for the PDF generation.
    $payments = commerce_payment_transaction_load_multiple(array(), array('order_id' =>  $order->order_id));

// If you just have one and that's all you want...
    $payment = !empty($payments) ? array_shift($payments) : NULL;
    $settings = variable_get('commerce_billy_pdf_text_settings', array());
    $custom_date_format = !empty($settings['invoice_date_format']) ? $settings['invoice_date_format'] : 'Y-m-d';
    if ($view_mode == "pdf" || $view_mode == 'canceled') {
        $payments = commerce_payment_transaction_load_multiple(array(), array('order_id' =>  $order->order_id));

// If you just have one and that's all you want...
        $payment = !empty($payments) ? array_shift($payments) : NULL;
    }
}

/**
 * Implements hook_commerce_cart_add_to_cart_form_alter().
 */
function dolce_product_form_alter(&$form, &$form_state) {
    $form_id = $form['#form_id'];
    if (strpos($form_id, 'commerce_cart_add_to_cart_form_') === 0) {
        dolce_product_change_quantity($form, $form_state);
    }
}

/*
* Permet de changer le input en select pour la quantite
 * Definir une quantite par defaut si il existe un argument pour forcer l'utilisation des "Faux Bundle"
 * Definir une quantite basé sur le stock réel
*/
function dolce_product_change_quantity(&$form, &$form_state) {
    if (isset($form['quantity']) && ($form['quantity']['#type'] == 'textfield')) {
        $form['quantity']['#type'] = 'select';
        $product = $form_state['default_product'];
        if (isset($product->commerce_stock) && !empty($product->commerce_stock['und'][0]['value'])) {
            $max_stock = intval($product->commerce_stock['und'][0]['value']);
            $form['quantity']['#options'] = drupal_map_assoc(range(1,$max_stock));
        }
        else {
            $form['quantity']['#options'] = drupal_map_assoc(range(1,10));
        }
    }
}