<?php

function dolce_product_menu() {
    $items['admin/config/dolce-product/ui-spinner'] = array(
        'title' => t('Configure UI Spinner Quantity'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('dolce_product_configure_ui_spinner_form'),
        'access arguments' => array('administer site configuration'),
    );

    return $items;
}


function dolce_product_configure_ui_spinner_form($form, &$form_state) {
    $form['commerce_kickstart_product_ui_spinner_disable'] = array(
        '#type' => 'checkbox',
        '#title' => t('Activate spinner for quantity item'),
        '#default_value' => variable_get('commerce_kickstart_product_ui_spinner_disable', 0),
        '#size' => 2,
        '#maxlength' => 2,
    );

    return system_settings_form($form);
}

/**** ICI On cherche les produits associés ayant la meme couleur ****/
function _dolce_product_get_minimal_related($nid, $color_tid) {
	$view = views_get_view('suggested_product');
	$args = array($nid, $color_tid);
	$view->set_arguments($args);
	$view->set_display('block');
	$view->execute();
	if (empty($view->result)) {
	    unset($view);
        $view = views_get_view('suggested_product');
		$args = array($nid);
		$view->set_arguments($args);
		$view->execute();
	}
	return $view->render();
}

function dolce_product_commerce_cart_attributes_refresh_alter(&$commands, $form, $form_state) {
  // Display an alert message showing the new default product ID.
  //$commands[] = ajax_command_alert(t('Now defaulted to product @product_id.', array('@product_id' => $form['product_id']['#value'])));
  $product_id = $form['product_id']['#value'];
  $product = commerce_product_load($product_id);
  $color_tid = dolce_product_get_haqihana_color($product);
  $nid = $product->display_context['entity_id'];
  //$view_output = views_embed_view('suggested_product','block', $nid, $color_tid);
  $view_output = _dolce_product_get_minimal_related($nid, $color_tid);
  $commands[] = ajax_command_replace('#suggested_product', '<div id="suggested_product">' . $view_output . '</div>');
}

/* On retourne le Taxonomy ID de la couleur */
function dolce_product_get_haqihana_color($product) {
	if (!empty($product->field_hh_color)) {
		return $product->field_hh_color['und']['0']['tid'];
	}
	return NULL;
}

/**
 * Implements hook_views_pre_view().
 */
function dolce_product_views_pre_view(&$view, &$display_id, &$args)
{
    switch($view->name) {

        case 'suggested_product':
            $get = drupal_get_query_parameters();
            if (!empty($get['id'])) {
                $product_id = $get['id'];
                $product = commerce_product_load($product_id);
                $color_tid = dolce_product_get_haqihana_color($product);
                $nid = $product->display_context['entity_id'];
                $args = array($nid, $color_tid);
            }
            break;
    }
}

function dolce_product_entity_view($entity, $type, $view_mode, $langcode) {
    switch ($type) {
        case 'commerce_product':
            global $language;
            $langcode = $language->language;
            $entity->content['title_field']['0']['#markup'] = $entity->title_field[$langcode][0]['value'];
    }
}

/**
 * Implements hook_commerce_shipping_service_info_alter().
 */
function dolce_product_commerce_shipping_service_info_alter(&$shipping_services)
{
    if (isset($shipping_services['free_shipping'])) {
        $title = $shipping_services['free_shipping']['display_title'];
        $shipping_services['free_shipping']['display_title'] = t($title);
    }
}

function dolce_product_commerce_order_view($order, $view_mode) {
    // Add content variables for the PDF generation.
    $payments = commerce_payment_transaction_load_multiple(array(), array('order_id' =>  $order->order_id));

// If you just have one and that's all you want...
    $payment = !empty($payments) ? array_shift($payments) : NULL;
    $settings = variable_get('commerce_billy_pdf_text_settings', array());
    $custom_date_format = !empty($settings['invoice_date_format']) ? $settings['invoice_date_format'] : 'Y-m-d';
    if ($view_mode == "pdf" || $view_mode == 'canceled') {
        $payments = commerce_payment_transaction_load_multiple(array(), array('order_id' =>  $order->order_id));

// If you just have one and that's all you want...
        $payment = !empty($payments) ? array_shift($payments) : NULL;
    }
}

/**
 * Implements hook_commerce_cart_add_to_cart_form_alter().
 */
function dolce_product_form_alter(&$form, &$form_state) {
    $form_id = $form['#form_id'];
    if ($form_id == 'views_form_commerce_cart_form_default') {
        /* Le but ici est d'afficher à l'utilisateur qu'il a utilisé un coupon code et de le rappeler dans le pannier */
        global $user;
        $order_id = commerce_cart_order_id($user->uid);
        $order = commerce_order_load($order_id);
        $codes = dolce_product_get_coupon_in_order($order);

        if ($codes) {
            $text = t('You use the coupon code(s) : ') . implode(',', $codes);
            $form['coupon-code'] = array(
                '#type' => 'markup',
                '#markup' => $text,
                '#weight' => 99,
            );
        }
    }
}

/**
 * @param $components
 * @param $price
 * @param $entity
 * Display if the customer saved money. No need now to display the Base price. The discount is displayed on the line item
 */
function dolce_product_commerce_price_formatted_components_alter(&$components, $price, $entity) {
    unset($components['base_price']);
    $args = arg();

    $totalAmountDiscount = dolce_product_get_total_amount_discount($components);
    if ($args[4] != 'pdf-invoice') { // Pas de ca dans la facture
        if ($totalAmountDiscount) {
            $components['saving'] = array(
                'title' => t('You save'),
                'price' => array(
                    'amount' => abs($totalAmountDiscount),
                    'currency_code' => 'EUR',
                    'data' => array(),
                ),
                'weight' => NULL,
            );
        }
    }
}

/**
 * Count the amount of discount
 * @param $components
 * @return int|null :
 */
function dolce_product_get_total_amount_discount(&$components) {
    $total = 0;
    foreach ($components as $key => $component){
        if (strpos($key, 'discount') === 0) {
            $total += $component['price']['amount'];
            unset($components[$key]);
        }
    }
    if ($total != 0) {
        return $total;
    }
    else {
        return NULL;
    }
}

/* Recupere le code coupon dans une order */
function dolce_product_get_coupon_in_order($entity) {
    $coupons = field_get_items('commerce_order', $entity, 'commerce_coupons');
    $codes = array();
    if (!empty($coupons)) {
        foreach ($coupons as $key => $coupon) {
            $promo = commerce_coupon_load($coupon['target_id']);
            $codes[] = $promo->code;
        }
        if (!empty($codes)) {
            return $codes;
        }
    }
    return null;
}

function dolce_product_field_display_alter(&$display, $context) {

    if ($context['entity_type'] == 'commerce_product' && $context['view_mode'] != 'product_in_cart') {
        if ($context['field']['field_name'] == 'commerce_price') {
            foreach ($context['instance']['display'] as $key => $value) {
                $display['type'] = 'commerce_price_rrp_your_price';
                $display['module'] = 'commerce_extra_price_formatters';
                $display['settings'] = dolce_product_rrp_field_settings();
            }
        }
    }
}

function dolce_product_rrp_field_settings() {
    return array(
        'calculation' => TRUE,
        'check_for_same_price' => 1,
        'show_saving' => 1,
        'include_tax_in_rrp' => 1,
        'rrp_label' => '',
        'offer_label' => '',
        'saving_label' => '',
        'whole_numbers_only' => 0,
        'custom_link_to_entity' => 0,
        'custom_prefix' => '',
        'custom_suffix' => '',
        'custom_reverse' => 0,
        'custom_trim' => 0,
        'custom_strtolower' => 0,
        'custom_strtoupper' => 0,
        'custom_ucfirst' => 0,
        'custom_ucwords' => 0,
        'custom_strip_tags' => 0,
        'custom_strip_preserve' => '',
    );
}

/**
 * @param $vars
 * Get the value of the field to display it in a modal
 */
function dolce_product_preprocess_node(&$vars) {
    switch ($vars['type']) {
        case 'haqihana_harness':
            $hh_informations = field_view_field('node', $vars['node'], 'field_hh_informations');
            $vars['hh_informations'] = $hh_informations;
    }
}
