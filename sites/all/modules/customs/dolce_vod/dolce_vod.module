<?php

require 'dolce_vod.database.inc';

/**
 * Implements hook_menu().
 */
function dolce_vod_menu()
{
  $items['user/%/vod/%'] = array(
    'title' => t('VOD'),
    'title callback' => 'dolce_vod_title_video',
    'title arguments' => array(3),
    'page callback' => 'dolce_vod_player_page',
    'page arguments' => array(1, 3),
    'access arguments' => array('access vod player'),
  );

  $items['user/%/vod'] = array(
    'title' => t('My VOD'),
    'page callback' => 'dolce_vod_videos',
    'page arguments' => array(1),
    'access arguments' => array('access vod player'),
  );

  $items['admin/config/vod'] = array(
    'title' => t('VOD Configuration module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dolce_vod_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function dolce_vod_theme($existing, $type, $theme, $path) {
  return array(
    'dolce_vod_player' => array(
      'template' => 'dolce_vod_player',
      'arguments' => array('data' => array())
    ),

    'dolce_vod_videos' => array(
      'template' => 'dolce_vod_videos',
      'arguments' => array('data' => array())
    ),
  );
}

function dolce_vod_entity_update($entity) {
  if (isset($entity->type) && $entity->type == 'commerce_order') {
    $status = $entity->status;
    switch ($status) {
      case 'vod':
        //FAIRE QQCHOSE
        dolce_vod_process($entity);
    }
  }
}

/* Si l'order est supprimé, on supprime les PID dans la base */
function dolce_vod_entity_delete($entity) {
  if (isset($entity->type) && $entity->type == 'commerce_order') {
    drupal_vod_delete_vod_by_orderid($entity->order_id);
  }
}

function dolce_vod_permission() {
  return array(
    'access vod player' => array(
      'title' => t('Access VOD player'),
      'description' => t('Access the page with the VOD player when customer paid a video'),
    ),
  );
}

function dolce_vod_commerce_order_update($order) {
  if ($order->status == 'pending') {
    $payment_type = $order->data['payment_method'];
    $payment_full = $order->data['commerce_payment_order_paid_in_full_invoked'];
    $vods = dolce_vod_check_if_vod_in_order($order);
    // Avant de passer tout le monde en VOD ... on verifie si paiement par CB, paiement OK et si la personne a du VOD dans la commande.
    if ($payment_type == 'commerce_stripe_pi|commerce_payment_commerce_stripe_pi' && $payment_full == TRUE && !empty($vods)) {
      commerce_order_status_update($order, 'vod', TRUE, 'Order VOD');
      $order->log = 'Order status update to VOD programatically';
      commerce_order_save($order);
    }
  }
}

/*Si VOD est dans la commande */
function dolce_vod_check_if_vod_in_order($order) {
  foreach ($order->commerce_line_items['und'] as $key => $line_item) {
    $line_item_load = commerce_line_item_load($line_item['line_item_id']);
    if (isset($line_item_load->commerce_product)) {
      $product = commerce_product_load($line_item_load->commerce_product['und']['0']['product_id']);
      switch ($product->type) {
        case 'vod':
          $pids[] = $product->product_id;
          break;
      }
    }
  }
  return $pids;
}

/* Process function */
function dolce_vod_process($order) {
  $pids = dolce_vod_check_if_vod_in_order($order);
  if (!empty($pids)) {
    dolce_vod_complete_process($order, $pids);
    dolce_vod_send_mail($order);
  }
}

/* Insertion dans la BDD les infos */
function dolce_vod_complete_process($order, $pids) {
  foreach ($pids as $key => $pid) {
    $increment = dolce_vod_get_location_time($pid);
    $time = time();
    dolce_vod_set_vid($order->uid, $order->order_id, $pid, $time, $increment);
  }
}

/*
function _dolce_vod_attach_vod_to_user($pids, $uid) {
  foreach ($pids as $key => $pid) {
    $pid = array('product_id' => $pid);
    if (empty($buyer->field_user_vod['und'])) {
      $buyer->field_user_vod['und']['0'] = $pid;
    }
    else {
      if (!dolce_vod_user_already_purchase_vod($buyer->field_user_vod['und'], $pid)){
        array_push($buyer->field_user_vod['und'], $pid);
      }
    }
  }
  $buyer = user_save($buyer);
  return $buyer;
}
*/

/* Recuperation de l'ID VIMEO */
function dolce_vod_get_video_id($product_id) {
  $product = commerce_product_load($product_id);
  $vimeo_id = $product->field_vod_vimeo_id['und']['0']['value'];
  return $vimeo_id;
}

/* Recuperation du titre de la video */
function dolce_vod_title_video($product_id) {
  $product = commerce_product_load($product_id);
  return $product->title;
}

/* On genere la page du player */
function dolce_vod_player_page($uid, $product_id) {
  global $user;
  if (empty(dolce_vod_user_purchase_pid($uid, $product_id))|| $uid != $user->uid) {
    drupal_access_denied();
  }
  $vimeo_id = dolce_vod_get_video_id($product_id);
  $data['vimeo_id'] = $vimeo_id;
  return theme('dolce_vod_player', array('data' => $data));
}

/* On genere la page avec toute les videos louees */

function dolce_vod_videos($uid) {

  $result = dolce_vod_get_valid_videos_by_user($uid);
  $numberofRows = count($result);
  if (empty($result)) {
    $data['empty'] = t('You have no VOD available');
  }
  else {
    foreach ($result as $one) {
      $product = commerce_product_load($one->pid);
      $render = entity_view('product', $product, 'list');
      $entities[$one->pid] = array(
        'title' => $product->title_original,
        'image' => image_style_url('catalog', $product->field_images['und'][0]['uri']),
        'link' => l($product->title_original, 'user/'.$uid.'/vod/'.$one->pid)
      );
    }
     $data['entities'] = $entities;
  }
  $responsiveCol = 12/$numberofRows;
  $responsiveCol = 4;
  $data['col'] = "col-lg-$responsiveCol col-md-$responsiveCol col-sm-6 col-xs-12";
  return theme('dolce_vod_videos', array('data' => $data));
}

function dolce_vod_user_already_purchase_vod($vods, $product_id) {
  foreach($vods as $key => $search) {
    if ($search['product_id'] == $product_id) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_mail().
 */
function dolce_vod_mail($key, &$message, $params)
{
  switch ($key) {
    case 'dolce_vod_mail':
      // Set headers etc
      $message['to'] = $params['to'];
      $message['subject'] = t('Your VOD access');
      $message['body'][] = t("Thank you for ordering a vod access for one of our videos.<br />");
      $message['body'][] = t("You can find all your videos on your VOD area at the following address : <br /><br />");
      $message['body'][] = $params['link'] . '<br />';
      $message['body'][] = t('See you soon');
      break;
  }
}

/* Preparation du mail avant de l'envoyer */
function dolce_vod_send_mail($order) {
  global $language;
  return drupal_mail('dolce_vod', 'dolce_vod_mail', $order->mail, $language->lang,
    array('link' => l(t('Access to VOD Area'), 'user/'. $order->uid . '/vod', array('absolute' => TRUE)), 'to' => $order->mail), 'contact@dolcevitadog.com', TRUE);
}

function dolce_vod_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $order = commerce_cart_order_load($user->uid);
  $nid_to_unset = variable_get('dolce_vod_nid', '');
  //SI pas de VOD dans le panier, aucune utilité d'accepter les CGV pour la VOD
  if (empty(dolce_vod_check_if_vod_in_order($order))) {
    unset($form['extra_pane__node__'.$nid_to_unset]);
  }
}

function dolce_vod_admin_settings_form($form, $form_state) {
  $form['dolce_vod_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Nid to unset if order has not VOD'),
    '#default_value' => variable_get('dolce_vod_nid', '')
  );

  return system_settings_form($form);
}

/* Get Duration Time of VOD product in timestamp*/
function dolce_vod_get_location_time($pid) {
  $product = commerce_product_load($pid);
  $duration_tid = $product->field_vod_duration['und']['0']['tid'];
  if (!empty($duration_tid)) {
    $term = taxonomy_term_load($duration_tid);
    return $term->field_duration_timestamp['und']['0']['value'];
  }
  else {
    return variable_get('dolce_vod_default_duration', 0);
  }
}

/* Hook user_delete, on supprime tous ses achats de VODS */
function dolce_vod_user_delete($account) {
  db_delete('dolce_vod')
    ->condition('uid', $account->uid)
    ->execute();
}

