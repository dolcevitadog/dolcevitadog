<?php

/** Implement of hook_menu **/
function dolce_event_menu() {

  $items['admin/config/event/configure'] = array(
    'title' => t('Administer configuration form for Event'),
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('dolce_event_form'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/event/role'] = array(
    'title' => t('Imports Emails Role'),
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('dolce_event_give_role_form'),
    'access arguments' => array('administer site configuration'),
  );

  $items['event/turid-rugaas-2021'] = array(
    'title' => t('Turid Rugaas Online - The complete Dog'),
    'page callback' => array('dolce_event_page'),
    'access arguments' => array('administer site configuration'),
  );

  $items['event/turid-rugaas-2021-replay'] = array(
    'title' => t('Replay Turid Rugaas Online - The complete Dog'),
    'page callback' => array('dolce_event_replay_page'),
    'access arguments' => array('access dolce event'),
  );

  $items['event/F4v7j4s3'] = array(
    'title' => t('REPEAT - Turid Rugaas Online - The complete Dog'),
    'page callback' => array('dolce_event_repeat_page'),
    'access arguments' => array('access rehearsal dolce event'),
  );

  $items['event/ajax/get_time/%/%'] = array(
    'title' => t('Get time'),
    'page callback' => array('dolce_event_ajax_get_time'),
    'page arguments' => array(3,4),
    'access arguments' => array('access dolce event'),
  );

  $items['event/ajax/is_time'] = array(
    'title' => t('Is time'),
    'page callback' => array('dolce_event_is_time_for_video'),
    'access arguments' => array('access dolce event'),
  );

  return $items;
}

function dolce_event_ajax_get_time($hour, $min) {
  if (!empty($hour) && !empty($min)) {
    $start_time = "$hour:$min";
    $start_time_obj = DateTime::createFromFormat('H:i', $start_time);
    $now_obj = new DateTime();
    $interval = $now_obj->getTimestamp() - $start_time_obj->getTimestamp();
    drupal_json_output($interval);
  }
  else {
    return false;
  }
}

function dolce_event_is_time_for_video() {
  $video = dolce_event_get_video_links();
  if (!empty($video)) {
    drupal_json_output(true);
  }
  else {
    drupal_json_output(false);
  }
}

/** Implement of hook_permission **/
function dolce_event_permission() {
  return array(
    'access dolce event' => array(
      'title' => t('Access dolce event'),
      'description' => t('Permit to user to access to the online seminar'),
    ),
    'access rehearsal dolce event' => array(
      'title' => t('Access Rehearsal dolce event'),
      'description' => t('Permit to user to access to the online seminar'),
    ),
  );
}

function dolce_event_repeat_page() {
  $data = dolce_event_generate_data();
  drupal_add_css(drupal_get_path('module', 'dolce_event').'/flags/flags.css');
  drupal_add_css(drupal_get_path('module', 'dolce_event').'/css/dolce_event.css');
  drupal_add_css(drupal_get_path('module', 'dolce_enig').'/css/dolce_enig.css');
  drupal_add_js(drupal_get_path('module', 'dolce_event').'/dolce_event.js');
  drupal_add_js(drupal_get_path('module', 'dolce_enig').'/js/dolce_enig.js');
  drupal_add_js('https://player.vimeo.com/api/player.js', 'external');
  if (!empty($data['video'])) {
    drupal_add_js(drupal_get_path('module', 'dolce_event').'/dolce_event_player.js');
    $my_settings = array(
      'schedule' => dolce_event_get_schedule_hour_min($data['video']),
      'video' => $data['video'],
      'video_promo' => $data['video_promo'],
    );
    drupal_add_js(array('dolce_event' => $my_settings), array('type' => 'setting'));
  }
  $data['trailer_mode'] = 0;
  return theme('dolce_event_general', array('data' => $data));
}

function dolce_event_page() {
  $data = dolce_event_generate_data();
  drupal_add_css(drupal_get_path('module', 'dolce_event').'/flags/flags.css');
  drupal_add_css(drupal_get_path('module', 'dolce_event').'/css/dolce_event.css');
  drupal_add_css(drupal_get_path('module', 'dolce_enig').'/css/dolce_enig.css');
  if ($data['trailer_mode'] == 0) {
    drupal_add_js(drupal_get_path('module', 'dolce_event').'/dolce_event.js');
    drupal_add_js(drupal_get_path('module', 'dolce_enig').'/js/dolce_enig.js');
    drupal_add_js('https://player.vimeo.com/api/player.js', 'external');
    if (!empty($data['video'])) {
      drupal_add_js(drupal_get_path('module', 'dolce_event').'/dolce_event_player.js');
      $my_settings = array(
        'schedule' => dolce_event_get_schedule_hour_min($data['video']),
        'video' => $data['video'],
        'video_promo' => $data['video_promo'],
      );
      drupal_add_js(array('dolce_event' => $my_settings), array('type' => 'setting'));
    }
    else {
      drupal_add_js(drupal_get_path('module', 'dolce_event').'/dolce_event_player_no_video.js');
      $my_settings = array(
        'video_promo' => $data['video_promo'],
      );
      drupal_add_js(array('dolce_event' => $my_settings), array('type' => 'setting'));
    }
  }
  else {
    $data['video'] = array(
      'vid' => 509011349,
      'link' => 'https://vimeo.com/509011349',
    );
    if (!empty($data['video'])) {
      drupal_add_js('https://player.vimeo.com/api/player.js', 'external');
      drupal_add_js(drupal_get_path('module', 'dolce_event').'/dolce_event_player_trailer.js');
      $my_settings = array(
        'video' => $data['video'],
        'video_promo' => $data['video_promo'],
      );
      drupal_add_js(array('dolce_event' => $my_settings), array('type' => 'setting'));
    }
  }
  return theme('dolce_event_general', array('data' => $data));
}

function dolce_event_replay_page() {
  $data = dolce_event_generate_replay_data();
  drupal_add_css(drupal_get_path('module', 'dolce_event').'/flags/flags.css');
  drupal_add_css(drupal_get_path('module', 'dolce_event').'/css/dolce_event.css');
  drupal_add_js(drupal_get_path('module', 'dolce_event').'/dolce_event.js');
  drupal_add_js('https://player.vimeo.com/api/player.js', 'external');
  drupal_add_js(drupal_get_path('module', 'dolce_event').'/dolce_event_replay_player.js');
  $my_settings = array(
    'videos' => $data['videos'],
    'video_promo' => $data['video_promo'],
    'replay' => $data['replay'],
  );
  drupal_add_js(array('dolce_event' => $my_settings), array('type' => 'setting'));
  return theme('dolce_event_replay', array('data' => $data));
}

function dolce_event_generate_replay_data() {
  $banner = dolce_event_generate_banner();
  $video = dolce_event_video_scheduler('all');
  $block_shoutbox = module_invoke('shoutbox', 'block_view', 'shoutbox');
  $shoutbox = $block_shoutbox['content'];
  $partner_block = views_embed_view('partners', $display_id = 'block_3');
  $book = dolce_event_get_book_data();
  $change_language = dolce_event_change_language();
  $video_promo = dolce_event_promotionnal_video(3);
  $replay = variable_get('dolce_event_replay', '0');
  $disclaimer = t("<h3>Thank you for reviewing the replay of the seminar. It will be available until Sunday, February 28th, 11:59pm CET.</h3>

  We remind you that the videos are the property of Turid Rugaas and DolceVitaDog.com. We take the liberty to remind you of ''the General Terms and Conditions of Sale'' that you have accepted :
  <br />
  <i>
  Article 19: Videos (VOD) and Online Events
  Online events are governed by the DADVSI law and under the Intellectual Property Code. (Articles 331-5 and 335-3-1 of the Intellectual Property Code).
  The customer commits to a strictly private use. In the case of piracy, illegal broadcasting, or downloading of the video in any form whatsoever.
  Article 323-1 of the penal code punishes 'the fact of accessing or remaining fraudulently, in all or part of an automated processing system'.
  The penalty is 2 years imprisonment and a fine of 30000€. This can be increased to 3 years of imprisonment and 45000€ fine when it results
  'either the deletion or modification of data contained in the system, or an alteration of the operation of this system'.</i>");

  return array(
    'videos' => $video,
    'banner' => $banner,
    'shoutbox' => $shoutbox,
    'no_video' => $no_video,
    'book' => $book,
    'partners' => $partner_block,
    'video_promo' => $video_promo,
    'change_language' => $change_language,
    'replay' => $replay,
    'disclaimer' => $disclaimer,
  );
}

function dolce_event_generate_data() {
  $zoom = variable_get('dolce_event_zoom_public', '');
  $banner = dolce_event_generate_banner();
  $video = dolce_event_get_video_links();
  $no_video = dolce_event_no_video();
  $qa = drupal_get_form('dolce_event_qa_form');
  $block_shoutbox = module_invoke('shoutbox', 'block_view', 'shoutbox');
  $shoutbox = $block_shoutbox['content'];
  $block_enig_paw = module_invoke('dolce_enig', 'block_view', 'dolce_enigma_paw');
  $enig_paw = $block_enig_paw['content'];
  $partner_block = views_embed_view('partners', $display_id = 'block_3');
  $trailer_mode = variable_get('dolce_event_trailer', '1');
  $game_is_on = variable_get('dolce_event_game_on', '1');
  $game = drupal_get_form('dolce_enig_form');
  $book = dolce_event_get_book_data();
  $video_promo = dolce_event_promotionnal_video();
  $change_language = dolce_event_change_language();
  return array(
    'zoom' => $zoom,
    'video' => $video,
    'banner' => $banner,
    'player' => $player,
    'qa' => $qa,
    'shoutbox' => $shoutbox,
    'trailer_mode' => $trailer_mode,
    'game' => $game,
    'no_video' => $no_video,
    'enig_paw' => $enig_paw,
    'game_is_on' => $game_is_on,
    'book' => $book,
    'partners' => $partner_block,
    'video_promo' => $video_promo,
    'change_language' => $change_language,
  );
}

function dolce_event_change_language() {
  global $language;
  $current = current_path();
  if ($language->language == 'fr') {
    $change_language = t("I don't speak French, let's go to the page in ").l('<div class="flag flag-gb">&nbsp</div>', '/en/'.$current, array('external' => true, 'html' => true));
  }
  else {
    $change_language = t("Je ne parle pas Anglais, allons sur la page en ").l('<div class="flag flag-fr">&nbsp</div>', '/fr/'.$current, array('external' => true, 'html' => true));
  }
  return $change_language;
}

function dolce_event_get_schedule_hour_min($video) {
  $time = explode(':', $video['time']['from']);
  return array(
    'hour' => $time[0],
    'min' => $time[1],
  );
}

function dolce_event_get_book_data(){
  return array(
    'sample' => drupal_get_path('module', 'dolce_event').'/assets/extrait_aboiement',
    'link' => drupal_get_path_alias('node/100'),
  );
}
function dolce_event_no_video() {
  $path = drupal_get_path('module', 'dolce_event').'/banners/wait_banner.jpg';
  $variables = array(
    'path' => $path,
    'alt' => t('Your video will be available soon'),
    'title' => t('Your video will be available soon'),
    'width' => '100%',
    'height' => '100%',
    'attributes' => array('class' => 'img-responsive', 'id' => 'player-empty'),
  );
  $img = theme('image', $variables);
  return $img;
}

function dolce_event_get_video_links() {
  $time_data = dolce_event_get_timedate();
  $videos = dolce_event_video_scheduler($time_data['day']);
  foreach ($videos as $key => $video) {
    $actual = DateTime::createFromFormat('H:i', $time_data['hour']);
    $from = DateTime::createFromFormat('H:i', $video['time']['from']);
    $to = DateTime::createFromFormat('H:i', $video['time']['to']);
    if ($actual >= $from && $actual <= $to)
    {
      return $video;
    }
  }
}

function dolce_event_get_timedate() {
  $date = new DateTime();
  $hour = $date->format('H:i');
  $day = $date->format('d');
  return array(
    'day' => $day,
    'hour' => $hour,
  );
}

function dolce_event_form() {

  $form['dolce_event_zoom_public'] = array(
    '#title' => t('Public Zoom link'),
    '#type' => 'textfield',
    '#default_value' => variable_get('dolce_event_zoom_public', ''),
  );

  $form['dolce_event_trailer'] = array(
    '#title' => t('Trailer Mode'),
    '#type' => 'select',
    '#options' => array(0 => t('No'), 1 => t('Yes')),
    '#default_value' => variable_get('dolce_event_trailer', '1'),
  );

  $form['dolce_event_game_on'] = array(
    '#title' => t('Game is on'),
    '#type' => 'select',
    '#options' => array(0 => t('No'), 1 => t('Yes')),
    '#default_value' => variable_get('dolce_event_game_on', '1'),
  );

  $form['dolce_event_symposium'] = array(
    '#title' => t('DolceVitDog Symposium is on'),
    '#type' => 'select',
    '#options' => array(0 => t('No'), 1 => t('Yes')),
    '#default_value' => variable_get('dolce_event_symposium', '1'),
  );

  $form['dolce_event_seminar_day'] = array(
    '#title' => t('Day of the Seminar'),
    '#type' => 'select',
    '#options' => array(20 => '20', 21 => '21'),
    '#default_value' => variable_get('dolce_event_seminar_day', ''),
  );

  $form['dolce_event_reset_winner'] = array(
    '#title' => t('Reset the winner'),
    '#type' => 'select',
    '#options' => array(0 => t('No'), 1 => t('Yes')),
  );

  $form['dolce_event_replay'] = array(
    '#title' => t('Replay is On'),
    '#type' => 'select',
    '#options' => array(0 => t('No'), 1 => t('Yes')),
    '#default_value' => variable_get('dolce_event_replay', '0'),
  );

  $winner1 = variable_get('dolce_enig_winner_20');
  if (!empty($winner1)) {
    $winner1 = user_load($winner1);
    $form['dolce_event_gagnant1'] = array(
      '#markup' => 'GAGANT JOURNEE 1 : ' . l($winner1->name, 'user/'.$winner1->uid),
    );
  }
  $winner2 = variable_get('dolce_enig_winner_21');
  if (!empty($winner2)) {
    $winner2 = user_load($winner2);
    $form['dolce_event_gagnant2'] = array(
      '#markup' => 'GAGANT JOURNEE 2 : ' . l($winner2->name, 'user/'.$winner2->uid),
    );
  }


  $form['#submit'][] = 'dolce_event_form_submit';

  return system_settings_form($form);
}

function dolce_event_form_submit(&$form, &$form_state) {
  $reset = $form_state['values']['dolce_event_reset_winner'];
  if ($reset == 1) {
    variable_del('dolce_enig_winner_20');
    variable_del('dolce_enig_winner_21');
  }
}

function dolce_event_video_scheduler($all) {
  $videos = array(
    'day_20' => array(
      '0' => array(
        'link' => 'https://player.vimeo.com/video/512293657',
        'vid' => 512293657,
        'id' => 'vid-512293657',
        'day' => 20,
        'time' => array(
          'from' => '08:48',
          'to' => '08:56',
        ),
      ),
      '1' => array(
        'link' => 'https://player.vimeo.com/video/511230842',
        'vid' => 511230842,
        'id' => 'vid-511230842',
        'day' => 20,
        'time' => array(
          'from' => '09:00',
          'to' => '11:00',
        ),
      ),
      '2' => array(
        'link' => 'https://player.vimeo.com/video/512042344',
        'day' => 20,
        'vid' => 512042344,
        'id' => 'vid-512042344',
        'time' => array(
          'from' => '11:30',
          'to' => '12:46',
        ),
      ),
      '3' => array(
        'link' => 'https://player.vimeo.com/video/511274771',
        'day' => 20,
        'vid' => 511274771,
        'id' => 'vid-511274771',
        'time' => array(
          'from' => '14:00',
          'to' => '15:03',
        ),
      ),
    ),
    'day_21' => array(
      '0' => array(
        'link' => 'https://player.vimeo.com/video/513626927',
        'vid' => 513626927,
        'id' => 'vid-513626927',
        'day' => 21,
        'time' => array(
          'from' => '08:48',
          'to' => '08:56',
        ),
      ),
      '1' => array(
        'link' => 'https://player.vimeo.com/video/513496313',
        'vid' => 513496313,
        'id' => 'vid-513496313',
        'day' => 21,
        'time' => array(
          'from' => '09:00',
          'to' => '10:51',
        ),
      ),
      '2' => array(
        'link' => 'https://player.vimeo.com/video/513623706',
        'day' => 21,
        'vid' => 513623706,
        'id' => 'vid-513623706',
        'time' => array(
          'from' => '11:20',
          'to' => '12:39',
        ),
      ),
      '3' => array(
        'link' => 'https://player.vimeo.com/video/513503762',
        'day' => 21,
        'vid' => 513503762,
        'id' => 'vid-513503762',
        'time' => array(
          'from' => '14:00',
          'to' => '15:09',
        ),
      ),
    ),
  );
  $day = variable_get('dolce_event_seminar_day', '1');
  if ($all == 'all') {
    return $videos;
  }
  return $videos['day_'.$day];
}

/**
* Implements hook_theme().
*/
function dolce_event_theme($existing, $type, $theme, $path) {
  return array(
    'dolce_event_general' => array(
      'template' => 'dolce_event_general',
      'arguments' => array('data' => array())
    ),
    'dolce_event_general_trailer' => array(
      'template' => 'dolce_event_general_trailer',
      'arguments' => array('data' => array())
    ),
    'dolce_event_replay' => array(
      'template' => 'dolce_event_replay',
      'arguments' => array('data' => array())
    ),
  );
}

function dolce_event_promotionnal_video($num) {
  $videos = array(
    '0' => array(
      //Haqihana
      'link' => 'https://player.vimeo.com/video/514017716',
      'vid' => 514017716,
      'id' => 'vid-promo-1'
    ),
    //Mantrailing
    '1' => array(
      'link' => 'https://player.vimeo.com/video/514017310',
      'vid' => 514017310,
      'id' => 'vid-promo-2'
    ),
    '2' => array(
    'link' => 'https://player.vimeo.com/video/514360608',
    'vid' => 514360608,
    'id' => 'vid-promo-3'
    ),
  );
  shuffle($videos);
  return array_slice($videos, 0, $num);
}

function dolce_event_generate_banner() {
  $date = new DateTime();
  $hour = $date->format('H');
  $day = variable_get('dolce_event_seminar_day');
  global $language;
  $lang = $language->language;
  $banner_name = (variable_get('dolce_event_trailer') == 1 ? 'banner_trailer.jpg' : 'banner_'.$lang.'_'.$day.'_'.$hour.'.jpg');
  if ($hour < 9 || $hour > 16) {
    $banner_name = 'banner_'.$lang.'_0.jpg';
  }
  $alt_title = (variable_get('dolce_event_trailer') == 1 ? t('Seminar Turid Rugaas - The complete Dog') : t('Exclusive Discount, hour per hour'));
  $path = drupal_get_path('module', 'dolce_event').'/banners/'.$day.'/'.$banner_name;
  $variables = array(
    'path' => $path,
    'alt' => $alt_title,
    'title' => $alt_title,
    'width' => '100%',
    'height' => '100%',
    'attributes' => array('class' => 'banner-event-image', 'id' => 'banner-event'),
  );
  $img = theme('image', $variables);
  return $img;
}

function dolce_event_qa_form($form, &$form_state){
  $form_state['values'] = array();

  $form['box-container'] = array(
    '#prefix' => '<div id="box">',
  );

  $form['message'] = array(
    '#markup' => NULL,
  );

  $form['name'] = array(
    '#type'         => 'textfield',
    '#required'     => true,
    '#title' => t('Your name'),
    '#attributes' => array('id' => 'name', 'placeholder'=> t('Your name')),
  );

  $form['questions'] = array(
    '#type'         => 'textarea',
    '#required'     => true,
    '#title' => t('Your question'),
    '#attributes' => array('id' => 'questions', 'placeholder'=> t('Your question')),
    '#resizable' => false,
  );

  $form['submit'] = array(
    '#type'         => 'submit',
    '#value'        => '<i class="fas fa-pencil-alt"></i> '. t("Ask your question"),
    '#ajax' => array(
      'callback' => 'ajax_submit_callback',
      'wrapper' => 'box',
    ),
    '#attributes' => array('class' => array('btn btn-primary')),
    '#suffix' => '</div>',
  );
  return $form;
}

function ajax_submit_callback($form, $form_state) {
  $name = check_plain($form_state['values']['name']);
  $questions = check_plain($form_state['values']['questions']);
  if (!empty($name) && !empty($questions)) {
    $entity = entity_create('qa', array('type' =>'qa'));
    $entity->field_qa_name = array(LANGUAGE_NONE => array(0 => array('value' => $name)));
    $entity->field_qa_questions = array(LANGUAGE_NONE => array(0 => array('value' => $questions)));
    $entity->save();
    //On definit le form qui sera ajouté
    $element = $form;
    if (isset($entity->id)) {
      $element['message']['#markup'] = '<div class="qa-message">.'. '<i class="far fa-thumbs-up"></i>' . t('Thank you'). ' ' . $form_state['values']['name'].' ! '. t('Your question has been received and might be asked during the Q&A Session') . '</div>';
      $element['name']['#value'] = array();
      $element['questions']['#value'] = array();
    }
    else {
      $element['message']['#markup'] = t('An error occured during saving your questions');
    }
    return $element;
  }
}

function dolce_even_get_user_name($user) {
  $default_pid = commerce_addressbook_get_default_profile_id($user->uid, 'billing');
  $profiles = commerce_customer_profile_load($default_pid);
  $first_name = $profiles->commerce_customer_address[LANGUAGE_NONE]['0']['first_name'];
  $last_name = $profiles->commerce_customer_address[LANGUAGE_NONE]['0']['last_name'];
  if (!empty($first_name) && !empty($last_name)) {
    $name = $profiles->commerce_customer_address[LANGUAGE_NONE]['0']['first_name'] . ' ' . $profiles->commerce_customer_address[LANGUAGE_NONE]['0']['last_name'];
  }
  else {
    $name = $user->name;
  }
  return $name;
}

function dolce_event_shoutbox($op, &$shout, &$a1 = NULL, $form_state = NULL) {
  switch ($op) {
    case 'form':
      // Alter the shoutbox add form.
      $a1['wrapper']['nick_submit_area']['submit']['#value'] = t('Shout !') . ' <i class="fab fa-discourse"></i>';
      $a1['wrapper']['nick_submit_area']['submit']['#attributes'] = array('class' => array('btn btn-primary'));
      break;
    }
  }

  function dolce_event_give_role_form($form, &$form_state) {
    $form['dolce_event_emails'] = array(
      '#type'         => 'textarea',
      '#required'     => true,
      '#title' => t('The mails'),
    );

    $form['pid_role'] = array(
      '#type'         => 'textfield',
      '#required'     => true,
      '#title' => t('The PID ROLE'),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Import')

    );

    return $form;
  }

  function dolce_event_give_role_form_submit($form, &$form_state) {
    $data = $form_state['values']['dolce_event_emails'];
    $pid = $form_state['values']['pid_role'];
    $emails = explode(PHP_EOL, $data);
    foreach ($emails as $key => $email) {
      _attribute_event_role($pid, $email);
    }

    return $form;
  }

  function _attribute_event_role($pid, $email) {
    $person = user_load_by_mail($email);
    if (is_object($person)) {
      drupal_set_message(t('Tout se passe bien pour @email', array('@email' => $email)), 'status');
      user_multiple_role_edit(array($person->uid), 'add_role', $pid);
    }
    else {
      drupal_set_message(t('The email @email is not an account on the website', array('@email' => $email)), 'error');
    }
    unset($person);
  }
